import { Document } from './database';
import { Value } from './engine';
export interface SchemaInfo {
    name?: string;
    tables: TableInfo[];
}
export interface TableInfo {
    name: string;
    shortName?: string;
    columns: ColumnInfo[];
    constraints?: ConstraintInfo[];
}
export interface ColumnInfo {
    name: string;
    type: string;
    size?: number;
    nullable?: boolean;
    autoIncrement?: boolean;
    default?: Value;
}
export interface ConstraintInfo {
    name?: string;
    table?: string;
    columns: string[];
    primaryKey?: boolean;
    unique?: boolean;
    references?: ConstraintInfo;
}
export interface SchemaConfig {
    tablePrefix?: RegExp;
    models: ModelConfig[];
}
export interface ClosureTableConfig {
    name: string;
    fields?: {
        ancestor?: string;
        descendant?: string;
        depth?: string;
    };
}
export interface ModelConfig {
    name?: string;
    table?: string;
    fields?: FieldConfig[];
    pluralName?: string;
    closureTable?: ClosureTableConfig;
}
export interface FieldConfig {
    name?: string;
    column?: string;
    relatedName?: string;
    throughField?: string;
    userType?: string;
}
export declare class Schema {
    database: SchemaInfo;
    config: SchemaConfig;
    models: Model[];
    private modelMap;
    private getModelConfig;
    private addModel;
    constructor(database: SchemaInfo, config?: SchemaConfig);
    model(name: string): Model;
}
export declare class Model {
    domain: Schema;
    name: string;
    fields: Field[];
    table: TableInfo;
    config: ModelConfig;
    primaryKey: UniqueKey;
    uniqueKeys: UniqueKey[];
    pluralName: string;
    private fieldMap;
    private getFieldConfig;
    constructor(domain: Schema, table: TableInfo, config: ModelConfig);
    field(name: string): Field;
    keyField(): SimpleField;
    keyValue(row: Document): Value;
    valueOf(row: Document, name: string | SimpleField): Value;
    checkUniqueKey(row: any, reject?: any): UniqueKey;
    getUniqueFields(row: any): {};
    getForeignKeyCount(model: Model): number;
    getOtherForeignKeyField(field: ForeignKeyField): ForeignKeyField;
    getForeignKeyOf(model: Model): ForeignKeyField;
    resolveForeignKeyFields(): void;
    isClosureField(field: ForeignKeyField): boolean;
    resolveRelatedFields(): void;
    private addField;
}
export declare class Field {
    name: string;
    model: Model;
    config: FieldConfig;
    uniqueKey?: UniqueKey;
    constructor(name: string, model: Model, config: FieldConfig);
    isUnique(): boolean;
    displayName(): string;
}
export declare class SimpleField extends Field {
    column: ColumnInfo;
    constructor(model: Model, column: ColumnInfo, config: FieldConfig);
}
export declare class ForeignKeyField extends SimpleField {
    referencedField: SimpleField;
    relatedField?: RelatedField;
    constructor(model: Model, column: ColumnInfo, config: any);
}
export declare class RelatedField extends Field {
    referencingField: ForeignKeyField;
    throughField?: ForeignKeyField;
    constructor(field: ForeignKeyField);
    getPascalName(plural?: boolean): string;
}
export declare class UniqueKey {
    fields: SimpleField[];
    primary: boolean;
    constructor(fields: Field[], primary?: boolean);
    name(): string;
    autoIncrement(): boolean;
}
export declare function lcfirst(s: string): string;
export declare function getReferencingFields(model: Model): ForeignKeyField[];
export declare function setModelName(config: SchemaConfig, model: Model, name: string): void;
